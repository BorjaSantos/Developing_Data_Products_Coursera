c <- b%*%t(b)
return(c)
}
aux(a[[1]])
library(miscTools)
corr.matrix.gen.3vars <- function(N,coefficients,semilla){
set.seed(semilla)
# CRITERIOS DE CONTROL DE LOS PARMETROS DE LA FUNCION
if(N <=0){
stop("El tamano de la muestra aleatoria de matrices de correlacion no es correcta")
}
if(length(coefficients) != N*3){
stop("El numero de coeficientes de correlacion no es correcto")
}
# CREACION DE LA LISTA DE MATRICES
matrix.list <- vector("list",N)
for (i in 1:N){
matrix.list[[i]] <- symMatrix(c(1,coefficients[i],coefficients[i+N],1,coefficients[i+(2*N)],1),byrow = FALSE)
}
return(matrix.list)
}
# EJEMPLO 1 DE METAANALISIS MULTIVARIANTE CON TRES ESTIMADORES DEL EFECTO.
# ESTIMADOR DEL EFECTO VARIABLE 1
smd1 <- rnorm(6,0.1)
var1 <- runif(6,5,20)
# ESTIMADOR DEL EFECTOS VARIABLE 2
smd2 <- rnorm(6,0.1)
var2 <- runif(6,5,20)
# ESTIMADOR DEL EFECTO VARIABLE 3
smd3 <- rnorm(6,0.1)
var3 <- runif(6,5,20)
# BASE DE DATOS:
estudio <- c(1:6)
datos <- cbind(estudio,smd1,var1,smd2,var2,smd3,var3)
datos
# Calculo de las matrices de varianzas-covarianzas VCOV = S*R*S
# Matrices de desviaciones estandar
sd1 <- diag(c(sqrt(datos[1,3]),sqrt(datos[1,5]),sqrt(datos[1,7])))
sd2 <- diag(c(sqrt(datos[2,3]),sqrt(datos[2,5]),sqrt(datos[2,7])))
sd3 <- diag(c(sqrt(datos[3,3]),sqrt(datos[3,5]),sqrt(datos[3,7])))
sd4 <- diag(c(sqrt(datos[4,3]),sqrt(datos[4,5]),sqrt(datos[4,7])))
sd5 <- diag(c(sqrt(datos[5,3]),sqrt(datos[5,5]),sqrt(datos[5,7])))
sd6 <- diag(c(sqrt(datos[6,3]),sqrt(datos[6,5]),sqrt(datos[6,7])))
sd <- list(sd1,sd2,sd3,sd4,sd5,sd6)
# Matrices de correlacion:
library(miscTools)
matrices.correlacion <- corr.matrix.gen.3vars(5,c(rbeta(5,0.5,0.6),runif(5,0.2,1),runif(5,-1,1)),2014)
lapply(matrices.correlacion,det)
# Matrices de correlacion corregidas:
matrices.correlacion2 <- transformar.matrices.3vars(matrices.correlacion)
lapply(matrices.correlacion2,det)
# Matriz de correlacion imputada:
matriz.correlacion <- matriz.imputada(matrices.correlacion2,3)$matriz.imputada
# Matrices de varianzas-covarianzas:
matrices.metaanalisis <- matrices.varcovar(matriz.correlacion,sd)
# metaanalisis multivariante:
library(mvmeta)
meta_prueba <- mvmeta(cbind(var1,var2,var3),matrices.metaanalisis)
# EJEMPLO 2 DE METAANALISIS MULTIVARIANTE CON TRES ESTIMADORES DEL EFECTO.
# ESTIMADOR DEL EFECTO VARIABLE 1
smd1 <- rnorm(6,0.1)
var1 <- runif(6,5,20)
# ESTIMADOR DEL EFECTOS VARIABLE 2
smd2 <- rbeta(6,0.1,4)
var2 <- runif(6,5,20)
# ESTIMADOR DEL EFECTO VARIABLE 3
smd3 <- runif(6,-2,2)
var3 <- runif(6,5,20)
# BASE DE DATOS:
estudio <- c(1:6)
datos <- cbind(estudio,smd1,var1,smd2,var2,smd3,var3)
datos
# Calculo de las matrices de varianzas-covarianzas VCOV = S*R*S
# Matrices de desviaciones estandar
sd1 <- diag(c(sqrt(datos[1,3]),sqrt(datos[1,5]),sqrt(datos[1,7])))
sd2 <- diag(c(sqrt(datos[2,3]),sqrt(datos[2,5]),sqrt(datos[2,7])))
sd3 <- diag(c(sqrt(datos[3,3]),sqrt(datos[3,5]),sqrt(datos[3,7])))
sd4 <- diag(c(sqrt(datos[4,3]),sqrt(datos[4,5]),sqrt(datos[4,7])))
sd5 <- diag(c(sqrt(datos[5,3]),sqrt(datos[5,5]),sqrt(datos[5,7])))
sd6 <- diag(c(sqrt(datos[6,3]),sqrt(datos[6,5]),sqrt(datos[6,7])))
sd <- list(sd1,sd2,sd3,sd4,sd5,sd6)
# Matrices de correlacion:
matrices.correlacion <- corr.matrix.gen.3vars(5,c(rbeta(5,0.5,0.6),runif(5,0.2,1),runif(5,-1,1)),2014)
lapply(matrices.correlacion,det)
# EJEMPLO 1 DE METAANALISIS MULTIVARIANTE CON TRES ESTIMADORES DEL EFECTO.
# ESTIMADOR DEL EFECTO VARIABLE 1
smd1 <- rnorm(6,0.1)
var1 <- runif(6,5,20)
# ESTIMADOR DEL EFECTOS VARIABLE 2
smd2 <- rnorm(6,0.1)
var2 <- runif(6,5,20)
# ESTIMADOR DEL EFECTO VARIABLE 3
smd3 <- rnorm(6,0.1)
var3 <- runif(6,5,20)
# BASE DE DATOS:
estudio <- c(1:6)
datos <- cbind(estudio,smd1,var1,smd2,var2,smd3,var3)
datos
# Calculo de las matrices de varianzas-covarianzas VCOV = S*R*S
# Matrices de desviaciones estandar
sd1 <- diag(c(sqrt(datos[1,3]),sqrt(datos[1,5]),sqrt(datos[1,7])))
sd2 <- diag(c(sqrt(datos[2,3]),sqrt(datos[2,5]),sqrt(datos[2,7])))
sd3 <- diag(c(sqrt(datos[3,3]),sqrt(datos[3,5]),sqrt(datos[3,7])))
sd4 <- diag(c(sqrt(datos[4,3]),sqrt(datos[4,5]),sqrt(datos[4,7])))
sd5 <- diag(c(sqrt(datos[5,3]),sqrt(datos[5,5]),sqrt(datos[5,7])))
sd6 <- diag(c(sqrt(datos[6,3]),sqrt(datos[6,5]),sqrt(datos[6,7])))
sd <- list(sd1,sd2,sd3,sd4,sd5,sd6)
# Matrices de correlacion:
library(miscTools)
matrices.correlacion <- corr.matrix.gen.3vars(5,c(rbeta(5,0.5,0.6),runif(5,0.2,1),runif(5,-1,1)),2014)
lapply(matrices.correlacion,det)
rebonato.jackel.espectral <- function(lista.matrices){
matrices.trasformadas <- vector("list",length(lista.matrices))
matriz.t <- diag(0,dim(matrices.correlacion[[1]]))
for(i in 1:length(lista.matrices)){
determinante <- det(lista.matrices[[i]])
if (determinante < 0){
descomposicion <- eigen(lista.matrices[[i]])
for (j in 1:length(descomposicion$values)){
if(descomposicion$values[j] < 0){
descomposicion$values[j] <- 0.0001
}
delta <- diag(descomposicion$values) #corregir
sqrt.delta <- diag(sqrt(descomposicion$values))
b.prima <- eigen(lista.matrices[[i]])$vectors%*%sqrt.delta
for(k in 1:dim(delta)[1]) {
matriz.t[k,k] <- 1/(sum(((descomposicion$vectors[k,])^2*diag(delta))))
}
sqrt.matriz.t <-diag(sqrt(diag(matriz.t)))
b <- sqrt.matriz.t%*%b.prima
m.aux <- b%*%t(b)
}
matrices.trasformadas[[i]] <- m.aux
}else{
matrices.trasformadas[[i]] <- lista.matrices[[i]]
}
}
matrices.trasformadas <- suppressWarnings(matrices.trasformadas)
return(matrices.trasformadas)
}
aux <- function(a,tol){
theta <- matrix(1,dim(a)[1],nrow=(dim(a)[1]))
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
for(j in 1:(dim(a)[2])-1){
b[i,j] <- cos(theta[i,j])*prod(sin(theta[i,][1:(j)]))
}
}
for(i in 1:dim(a)[1]){
b[1,dim(a)[2]] <- prod(sin(theta[i,]))
}
c <- b%*%t(b)
return(c)
}
a <- matrices.correlacion[[1]]
a
rebonato.jackel.espectral <- function(lista.matrices){
matrices.trasformadas <- vector("list",length(lista.matrices))
matriz.t <- diag(0,dim(matrices.correlacion[[1]]))
for(i in 1:length(lista.matrices)){
determinante <- det(lista.matrices[[i]])
if (determinante < 0){
descomposicion <- eigen(lista.matrices[[i]])
for (j in 1:length(descomposicion$values)){
if(descomposicion$values[j] < 0){
descomposicion$values[j] <- 0.0001
}
delta <- diag(descomposicion$values) #corregir
sqrt.delta <- diag(sqrt(descomposicion$values))
b.prima <- eigen(lista.matrices[[i]])$vectors%*%sqrt.delta
for(k in 1:dim(delta)[1]) {
matriz.t[k,k] <- 1/(sum(((descomposicion$vectors[k,])^2*diag(delta))))
}
sqrt.matriz.t <-diag(sqrt(diag(matriz.t)))
b <- sqrt.matriz.t%*%b.prima
m.aux <- b%*%t(b)
}
matrices.trasformadas[[i]] <- m.aux
}else{
matrices.trasformadas[[i]] <- lista.matrices[[i]]
}
}
matrices.trasformadas <- suppressWarnings(matrices.trasformadas)
return(matrices.trasformadas)
}
reboinato.jackes(a)
rebonato.jackes(a)
rebonato.jackel.espectral(a)
rebonato.jackel.espectral(matrices.correlacion[[1]])
rebonato.jackel.espectral(matrices.correlacion)
A <- suppressWarnings(rebonato.jackel.espectral(matrices.correlacion))
A
aux(A[[1]])
for(i in 1:dim(a)[1]){
for(j in 1:(dim(a)[2])-1){
b[i,j] <- cos(theta[i,j])*prod(sin(theta[i,][1:(j)]))
}
}
theta <- matrix(1,dim(a)[1],nrow=(dim(a)[1]))
theta
for(i in 1:dim(a)[1]){
for(j in 1:(dim(a)[2])-1){
b[i,j] <- cos(theta[i,j])*prod(sin(theta[i,][1:(j)]))
}
}
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
b
for(i in 1:dim(a)[1]){
for(j in 1:(dim(a)[2])-1){
b[i,j] <- cos(theta[i,j])*prod(sin(theta[i,][1:(j)]))
}
}
b
cos(theta[1,1])
sin(1)
theta1 <- rbind(rep(1,dim(a)[1],theta))
dim(a)[1]
theta1 <- rbind(rep(1,dim(a)[1]),theta)
theta1
cos(theta[1,1])*prod(theta1[1:1])
cos(theta[1,2])*prod(theta1[1:1])
B <- matrix(3,3,2)
B
D <- matrix(4,3,2)
D
B
B.prima <- rbind(rep(1,3),B[,1],B[,1]*B[,2])
B.prima
B.prima <- cbind(rep(1,3),B[,1],B[,1]*B[,2])
B.prima
B.prima <- cbind(c(rep(1,3),B[,1],B[,1]*B[,2])=
B.prima <- cbind(c(rep(1,3),B[,1],B[,1]*B[,2]))
B.prima
aux <- function(a){
theta <- matrix(1,dim(a)[1],nrow=(dim(a)[1])-1)
theta1 <- rbind(rep(1,dim(a)[1]),theta)
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
for(j in 1:(dim(a)[2])-1){
b[i,j] <- cos(theta[i,j])*prod(c(1,sin(theta[i,][1:(j)])))
}
}
for(i in 1:dim(a)[1]){
b[1,dim(a)[2]] <- prod(sin(theta[i,]))
}
c <- b%*%t(b)
return(c)
}
aux(A)
aux(A[[1]])
aux <- function(a){
theta <- matrix(1,dim(a)[1],nrow=(dim(a)[1])-1)
theta1 <- rbind(rep(1,dim(a)[1]),theta)
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
for(j in 1:(dim(a)[2])-1){
b[i,j] <- cos(theta[i,j])*prod(c(1,sin(theta[i,][1:j])))
}
}
for(i in 1:dim(a)[1]){
b[1,dim(a)[2]] <- prod(sin(theta[i,]))
}
c <- b%*%t(b)
return(c)
}
aux(A[[1]])
theta[1,]
deim(theta)
dim(theta)
dim(a)[2]
theta <- matrix(1,dim(a)[1],nrow=(dim(a)[1])-1)
dim(theta)
theta <- matrix(1,nrow=dim(a)[1],ncow=(dim(a)[1])-1)
theta <- matrix(1,nrow=dim(a)[1],ncow=(dim(a)[1])-1))
theta <- matrix(1,nrow=dim(a)[1],ncow=(dim(a)[1]-1))
theta <- matrix(1,nrow=dim(a)[1],ncol=(dim(a)[1]-1))
theta
theta[1,]
sen(theta[1,])
sin(theta[1,])
prod(c(1,sin(theta[1,][1:1])))
cos(theta[1,1])
prod(c(1,sin(theta[1,])))
prod(c(1,sin(theta[1,])))[1]
c(1,prod(sin(theta[1,])))
prod <- 1
aux <- function(a){
theta <- matrix(1,nrow=dim(a)[1],ncol=(dim(a)[1]-1))
theta1 <- rbind(rep(1,dim(a)[1]),theta)
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
b[i,1] <- cos(theta[i,1])
}
#c <- b%*%t(b)
return(b)
}
aux(A[[1]])
aux <- function(a){
theta <- matrix(1,nrow=dim(a)[1],ncol=(dim(a)[1]-1))
#theta1 <- rbind(rep(1,dim(a)[1]),theta)
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
b[i,1] <- cos(theta[i,1])
}
#c <- b%*%t(b)
return(b)
}
aux(A[[1]])
aux <- function(a){
theta <- matrix(1,nrow=dim(a)[1],ncol=(dim(a)[1]-1))
#theta1 <- rbind(rep(1,dim(a)[1]),theta)
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
b[i,1] <- cos(theta[i,1])
}
for(i in 1:dim(a)[1]){
b[,dim(a)[2]] <- prod(sen(theta[i,]))
}
#c <- b%*%t(b)
return(b)
}
aux(A[[1]])
aux <- function(a){
theta <- matrix(1,nrow=dim(a)[1],ncol=(dim(a)[1]-1))
#theta1 <- rbind(rep(1,dim(a)[1]),theta)
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
b[i,1] <- cos(theta[i,1])
}
for(i in 1:dim(a)[1]){
b[,dim(a)[2]] <- prod(sin(theta[i,]))
}
#c <- b%*%t(b)
return(b)
}
aux(A[[1]])
sin(1)*sin(1)
aux <- function(a){
theta <- matrix(1,nrow=dim(a)[1],ncol=(dim(a)[1]-1))
#theta1 <- rbind(rep(1,dim(a)[1]),theta)
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
b[i,1] <- cos(theta[i,1])
}
for(i in 1:dim(a)[1]){
b[,dim(a)[2]] <- prod(sin(theta[i,]))
}
for(i in 1:dim(a)[1]){
for(j dim(a[2])+1:dim(a[2])-1){
b[i,j] <- cos(theta[i,j])*prod(sin(theta[i,][1,j-1]))
}
}
#c <- b%*%t(b)
return(b)
}
aux <- function(a){
theta <- matrix(1,nrow=dim(a)[1],ncol=(dim(a)[1]-1))
#theta1 <- rbind(rep(1,dim(a)[1]),theta)
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
b[i,1] <- cos(theta[i,1])
}
for(i in 1:dim(a)[1]){
b[,dim(a)[2]] <- prod(sin(theta[i,]))
}
for(i in 1:dim(a)[1]){
for(j in dim(a[2])+1:dim(a[2])-1){
b[i,j] <- cos(theta[i,j])*prod(sin(theta[i,][1,j-1]))
}
}
#c <- b%*%t(b)
return(b)
}
aux(A[[1]])
aux <- function(a){
theta <- matrix(1,nrow=dim(a)[1],ncol=(dim(a)[1]-1))
#theta1 <- rbind(rep(1,dim(a)[1]),theta)
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
b[i,1] <- cos(theta[i,1])
}
print(b)
for(i in 1:dim(a)[1]){
b[,dim(a)[2]] <- prod(sin(theta[i,]))
}
print(b)
for(i in 1:dim(a)[1]){
for(j in dim(a[2])+1:dim(a[2])-1){
b[i,j] <- cos(theta[i,j])*prod(sin(theta[i,][1,j-1]))
}
}
#c <- b%*%t(b)
return(b)
}
aux(A[[1]])
rep(2,1)
1:10
2:2
aux <- function(a){
theta <- matrix(1,nrow=dim(a)[1],ncol=(dim(a)[1]-1))
#theta1 <- rbind(rep(1,dim(a)[1]),theta)
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
b[i,1] <- cos(theta[i,1])
}
print(b)
for(i in 1:dim(a)[1]){
b[,dim(a)[2]] <- prod(sin(theta[i,]))
}
print(b)
for(i in 1:dim(a)[1]){
for(j in 2:dim(a[2])-1){
b[i,j] <- cos(theta[i,j])*prod(sin(theta[i,][1,j-1]))
}
}
#c <- b%*%t(b)
return(b)
}
aux(A[[1]])
dim(a)[2]
install.packages("knitr")
data(galton)
data(Galton)
library(UsingR)
install.packages("UsingR")
data(galton)
names(dalton)
names(galton)
library(UsingR)
data(galton)
names(galton)
data(cars)
names(cars)
names(mtcars)
?mtcars
setwd("D:/Documents and Settings/UPV-EHU/Escritorio/Developing_data_products/Assignment")
shiny::runApp()
shiny::runApp()
library(slidify)
install.packages("devtools")
install_github("slidify","ramnathv")
library(devtools)
install_github("slidify","ramnathv")
install_github("slidifyLibraries","ramnathv")
library(slidify)
setwd("D:/Documents and Settings/UPV-EHU/Escritorio/Developing_data_products/Assignment")
author("first_deck")
data(mtcars)
str(mtcars)
citation(datasets)
library(datasets)
citation(datasets)
citation("datasets")
?citation
packageDescription("datasets")
?mtcars
library(datasets)
packageDescription(datasests)
packageDescription("datasests")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
library(slidify)
browse("index.html")
browseURL("index.html")
library(slidify)
slidify("index.Rmd")
library(knit)
library(knitR)
library(knitrç)
library(knitr)
slidify("index.Rmd")
str(mtcars)
slidify("index.Rmd")
?slidify
slidify("index.Rmd",knit_deck=FALSE)
slidify("index.Rmd")
shiny::runApp('D:/Documents and Settings/UPV-EHU/Escritorio/Developing_data_products/Assignment')
shiny::runApp('D:/Documents and Settings/UPV-EHU/Escritorio/Developing_data_products/Assignment')
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.Rmd")
help(mtcars)
shiny::runApp('D:/Documents and Settings/UPV-EHU/Escritorio/Developing_data_products/Assignment')
slidify("index.Rmd")
summary(database)
table(databse)
table(database)
?summary
tabulate(database)
str(database)
?highligts
install.packages("highlight")
library(highligth)
library(highlight)
?highlight
slidify("index.Rmd")
slidify("index.Rmd")
