#fill sampl with sampl, and the mean of three random items from NORMAL
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 3 " )
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(NORMAL, 6, replace=T)))
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 6 " )
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(NORMAL, 300, replace=T)))
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 300 " )
x <- rnorm(100000)
y <- rnorm(100000)
z <- rep(NA, 100000) #z is created empty but with a given size.
system.time({
for (i in 1:100000) {
z[i] <- x[i] + y[i]
}
})
system.time( k <- x + y )
set.seed(897)
ME <- matrix(rnorm(24000),nrow=1000)
colnames(ME) <- c(paste("A",1:12,sep=""),paste("B",1:12,sep=""))
length(which(ME<=0))
keep <- (apply(ME[,1:12],1,mean) > 0) & (apply(ME[,13:24],1,mean) > 0)
length(keep)
sum(keep) #make sure you understand sum() applied to logicals
head(keep)
table(keep)
trimmed <- apply(ME,1,function(ME){mean(ME, trim=0.05)})
table(trimmed)
head(trimmed)
dim(trimmed)
dims(trimmed)
class(trimmed)
length(trimmed)
?apply
head(ME)
trimmed <- apply(ME,1,function(ME){mean(ME, trim=0.05)})
apply(ME,1,function(test){})
?t.test
apply(ME,1,function(test){t.test(ME)})
apply(ME,1,function(test){t.test(ME[:12],ME[13:24])})
apply(ME,1,function(test){t.test(ME[1:12],ME[13:24])})
apply(ME,1,function(test){t.test(ME[,1:12],ME[,13:24])})
dim(ME)
t.test(ME[,1],ME[,2])
t.test(ME[,1],ME[,3])
ME1 <- ME[,1:12]
ME2 <- ME[,13:24]
p <- numeric()
for(i in 1:12){}
for(i in 1:12){
p[i] <- t.test(ME1[,i],ME[,i])$p.value
}
p
for(i in 1:12){
p[i] <- t.test(ME1[,i],ME2[,i])$p.value
}
p
whic(p<0.5)
which(p>0.5)
which(p=<0.5)
which(p<=0.5)
apply(ME,1,function(test){t.test(ME[,1:12],ME[,13:24])})
for(i in 1:12){
t.test(ME[,1],ME[,12+i])
}
for(i in 1:12){
print(t.test(ME[,1],ME[,12+i]))
}
for(i in 1:12){
print(t.test(ME[,1],ME[,12+i])$p.value)
}
head(ME)
for(i in 1:12){
print(t.test(ME[,1],ME[,12+i])$p.value)
}
t.test(ME[,1],ME[,13])
t.test(ME[,2],ME[,14])
install.packages("UsingR")
install.packages("UsingR")
?mean
x <- c(0.18,-1.54,0.42,0.95)
w <- c(2,1,3,1)
weighted.mean(x,w)
0.5/0.5
1.5*0.4
data(mtcars)
mtcars
model <- lm(mtcars$mpg ~ mtcars$wt,data=mtcars)
summary(model)
x <- c(8.58,10.46,9.01,9.64,8.86)
z <- (x-mean(x))/sd(x)
z
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
mod1 <- lm(y~x)
summary(mod1)
data(cars)
datos <- data(cars)
head(datos)
datos
head(cars)
cars
data(mtcars)
head(mtcars)
mod2 <- lm(mpg~I(wt-mean(wt)),data=mtcars)
summary(mod2)
mod2
attributes(mod2)
?coef.int
?coeffs
?coef
coef(mod2)
?lm
?confint
confint(mod2)
?mtcars
mod2.2 <- lm(mpg~wt,data=mtcars)
summary(mod2.2)
names(mtcars)
mtcars2 <- mtcars[,c(1,6)]
head(mtcars2)
mod2.2 <- lm(mpg~wt,data=mtcars2)
summary(mod2.2)
new <- 3
predict(mod2.2,newdata=data.frame(wt=new))
confint(predict(mod2.2,newdata=data.frame(wt=new)))
mod2.3 <- predict(mod2.2,newdata=data.frame(wt=new))
confint(mod3)
confint(mod2.3)
summary(lm(mpg~wt,data=mtcars2))
mod3 <- lm(mpg~wt,data=mtcars2)
summary(mod3)
predict(mod3,newdata=data.frame(wt=new))
predict(mod3,newdata=data.frame(wt=new),interval="prediction")
predict(mod3,newdata=data.frame(wt=new),interval="confidence")
mew2 <- 2
predict(mod3,newdata=data.frame(wt=new2),interval="confidence")
predict(mod3,newdata=data.frame(wt=nmew2),interval="confidence")
predict(mod3,newdata=data.frame(wt=mew2),interval="confidence")
-5.3445*2
predict(mod3,newdata=data.frame(wt=mew2),interval="predict")
coeffs <- mod3$coefficients
-10.689+c(-1,1)*qt(0.975,df=mod3$df)*0.5591
-10.689+c(-1,1)*qt(0.975,df=mod3$df)*coeffs[2,2]
coeffs
attributes(mod3)
confint(mod3)
4.202635*2
data(mtcars)
names(mtcars)
mod1 <- lm(mpg~wt,data=mtcars)
attributes(mod1)
mod2 <- lm(mpg~1,data=mtcars)
(sum(mod1$residuals)^2)/(sum(mod2$residuals)^2)
summary(mod1)
summary(mod2)
attributes(mod1)
(sum(mod1$residuals^2))/(sum(mod2$residuals^2))
summary(mod1)
confint(mod2)
confint(mod1)
mew2 <- mean(wt)
mew2 <- mean(mtcars$wt)
predict(mod1,newdata=data.frame(wt=mew2),interval="confidence")
mew2 <- 3
predict(mod1,newdata=data.frame(wt=mew2),interval="confidence")
predict(mod1,newdata=data.frame(wt=mew2),interval="predict")
mew2 <- 2
predict(mod1,newdata=data.frame(wt=mew2),interval="predict")
data(mtcars)
str(mtcars)
head(mtcars)
dim(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
summary(mtcars)
str(mtcars)
plot(mpg~disp,data=mtcars)
plot(mpg~disp,data=mtcars,main="mpg vs. disp")
plot(mpg~hp,data=mtcars,main="mpg vs. hp")
plot(mpg~drat,data=mtcars,main="mpg vs. drat")
plot(mpg~wt,data=mtcars,main="mpg vs. wt")
plot(mpg~qsec,data=mtcars,main="mpg vs. qsec")
plot(mpg~disp,data=mtcars,main="Miles/gallon vs. Displacement")
plot(mpg~hp,data=mtcars,main="Miles/gallon vs. Gross horsepower")
plot(mpg~drat,data=mtcars,main="Miles/gallon vs. Rear axle ratio")
plot(mpg~wt,data=mtcars,main="Miles/galon vs. Weight (lb/1000)")
plot(mpg~qsec,data=mtcars,main="Miles/gallon vs. 1/4 mile time")
?mfrow
?par
par(mfrow=c(3, 2))
plot(mpg~disp,data=mtcars,main="Miles/gallon vs. Displacement")
plot(mpg~hp,data=mtcars,main="Miles/gallon vs. Gross horsepower")
par(mfrow=c(3, 2))plot(mpg~disp,data=mtcars,main="Miles/gallon vs. Displacement")
plot(mpg~hp,data=mtcars,main="Miles/gallon vs. Gross horsepower")
plot(mpg~drat,data=mtcars,main="Miles/gallon vs. Rear axle ratio")
plot(mpg~wt,data=mtcars,main="Miles/galon vs. Weight (lb/1000)")
plot(mpg~qsec,data=mtcars,main="Miles/gallon vs. 1/4 mile time")
par(mfrow=c(3, 2))plot(mpg~disp,data=mtcars,main="Miles/gallon vs. Displacement")
par(mfrow=c(3,2))
plot(mpg~disp,data=mtcars,main="Miles/gallon vs. Displacement")
plot(mpg~hp,data=mtcars,main="Miles/gallon vs. Gross horsepower")
plot(mpg~drat,data=mtcars,main="Miles/gallon vs. Rear axle ratio")
plot(mpg~wt,data=mtcars,main="Miles/galon vs. Weight (lb/1000)")
plot(mpg~qsec,data=mtcars,main="Miles/gallon vs. 1/4 mile time")
?boxplot(mpg~cyl,data=mpg)
boxplot(mpg~cyl,data=mpg)
?boxplot
str(mtcars)
boxplot(mpg~cyl,data=mtcars,main="Miles/gallon and cylinders")
dev.off()
boxplot(mpg~cyl,data=mtcars,main="Miles/gallon and cylinders")
boxplot(mpg~vs,data=mtcars,main="Miles/gallon and V/S")
boxplot(mpg~am,data=mtcars,main="Miles/gallon and type of transmission")
boxplot(mpg~gear,data=mtcars,main="Miles/gallon and Number fw gars")
boxplot(mpg~carb,data=mtcars,main="Miles/gallon and Number of carburetors")
par(mfrow=c(3,2))
boxplot(mpg~cyl,data=mtcars,main="Miles/gallon and cylinders")
boxplot(mpg~vs,data=mtcars,main="Miles/gallon and V/S")
boxplot(mpg~am,data=mtcars,main="Miles/gallon and type of transmission")
boxplot(mpg~gear,data=mtcars,main="Miles/gallon and Number fw gars")
boxplot(mpg~carb,data=mtcars,main="Miles/gallon and Number of carburetors")
dev.off()
boxplot(mpg~am,data=mtcars,col=red,main="Miles/galon by transmission")
boxplot(mpg~am,data=mtcars,col="red",main="Miles/galon by transmission")
boxplot(mpg~am,data=mtcars,col="red",ylab="MPG",main="Miles/galon by transmission")
?anova
summary(aov(mpg~am,data=mtcars))
attributes(summary(aov(mpg~am,data=mtcars)))
model <- lm(mpg~am,data=mtcars)
summary(model)
model <- lm(mpg~as.factor(am),data=mtcars)
summary(model)
model <- glm(mpg~as.factor(am),data=mtcars)
summary(model)
plot(model)
sumary(model)
summary(model)
confint(model)
confint(model)[2]
confint(model)[2,]
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
plot(child ~ parent,
| galton)
plot(child ~ parent,galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline,lwd=3, col='red')
summary(regline)
summary(regerline)
summary(regrline)
regrline <- lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fot)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
library(MASS)
data(shuttle)
?shuttle
glm1 <- glm(use~as.factor(wind),data=shuttle,family=binomial)
summary(glm1)
exp(confint(glm1))
exp(coef(glm1))
glm2 <- glm(use~as.factor(wind)+magn,data=shuttle,family=binomial)
summary(glm2)
exp(coef(glm2))
exp(confint(glm2))
glm1.1 <- glm(1-use~as.factor(wind),data=shuttle,family=binomial)
glm1.1 <- glm((1-use)~as.factor(wind),data=shuttle,family=binomial)
use2 <- 1-use
use2 <- 1-shuttle$use
head(shuttle)
data(InsectSprays)
head(InsectSprays)
?InsectSprays
summary(InsectSpray)
summary(InsectSprays)
contributors()
library(MASS)
data(InsectSprays)
?InsectSprays
glm1 <- glm(count~as.factor(spray),data=InsectsSprays,family="poisson")
glm1 <- glm(count~as.factor(spray),data=InsectSprays,family="poisson")
summary(glm1)
1/0.05588
glm2 <- glm(count~spray,data=InsectSprays,family="poisson")
summary(glm2)
exp(coeff(glm1))
exp(coeffs(glm1))
exp(glm1$coeffs)
exp(glm1$coeff)
?glm
install.packages("swirl")
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x~y)
plot(x~y)
plot(y~x)
?relevel
Spray <- relevel(InsectSprays,ref="B")
Spray <- relevel(InsectSprays$spray,ref="B")
glm2 <- glm(count~Spray,data=InsectSprays,family="poisson")
summary(glm2)
exp(glm2$coeff)
data(shuttle)
names(shuttle)
?shuttle
shuttle$use
data(menarche)
str(menarche)
mydata <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
mylogit <- glm(admit ~ gre + gpa + rank, data = mydata, family = "binomial")
summary(mylogit)
head(mydata)
mylogit2 <- glm((1-admit) ~ gre + gpa + rank, data = mydata, family = "binomial")
summary(mylogit2)
load("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda")
library(swirl)
swirl()
swirl()
6
dim(InsectSprays)
head(InsectSprays,15)
sA
summary(InsectSprays$spray)
summary(InsectSprays[,2])
?sapply
sapply(InsectSprays,class)
fit <- lm(count~as.factor(spray),data=InsectSprays)
summary(fit)
summary(fit)$coeff
summary(fit)$coef
summary(fit)$coef[,1]
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count~as.factor(spray)-1,data=InsectSprays)
summary(nfit)$coef
relevel(InsectSprays,"C")
relevel(InsectSprays$spray,"C")
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,"C")
fit2 <- lm(count~as.factor(spray2),data=InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[3]-fit$coef[2])/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
library(swirl)
swirl()
data(hunger)
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, data = hunger)
summary(fit)$coef
lmF <- lm(Numeric~Sex=="Female",data=hunger)
lmF <- lm(Numeric[Sex=="Female"] ~
| Year[Sex=="Female"],hunger)
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth <- lm(Numeric ~ Year + Sex, data = hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, data = hunger)
summary(lmInt)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fit <- lm(y ~ x, out2[-1,])
fit <- lm(y ~ x, out2[-1, ])
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno,which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(rstandars(fit))
sigma <- sqrt(rstandar(fit))
sigma <- sqrt(rstandard(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- rstandard(fit)
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fit)/resid(fit))
sigma1 <- sqrt(deviance(fitno)/resid(fitno))
sigma1 <- sqrt(deviance(fitno)/df.resid(fitno))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2)-predict(fit, out2)
dy/2*sigma^2
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility~.,data=swiss)
vif(mdl)
mdl2 <- lm(Fertility~.-Examination,data=swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility~Agriculture,data=swiss)
fit2 <- lm(Fertility~Agricuture+Examination+Education,data=swiss)
fit2 <- lm(Fertility~Agriculture+Examination+Education,data=swiss)
fit3 <- lm(Fertility~Agriculture+Examination+Education,data=swiss)
fit1 <- lm(Fertility~Agriculture,data=swiss)
fit2 <- lm(Fertility~Agriculture+Examination+Education,data=swiss)
fit3 <- lm(Fertility~Agriculture+Examination+Education,data=swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- deviance(fit1)-deviance(fit3)
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5,fit6)
library(swirl)
swirl()
View(ravenData).
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore,ravens,"binomial")
mdl <- glm(ravenWinNum ~ ravenScore,ravenData,"binomial")
mdl <- glm(ravenWinNum ~ ravenScore,ravenData,family="binomial")
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6))
)
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(visits ~ date,offset=log(visits+1), poisson, hits)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data=hits, offset = log(visits + 1))
qpois(.95,mdl2$fitted.values[704])
cor(galton$child-mean(galton$child),galton$parent-mean(galton$parent))
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor~gpa_nor,data=galton)
l_nor <- lm(gch_nor~gpa_nor)
install.packages("caret")
library(caret)
install.packages("caret")
?colSums
colSums
colSums()
predict
lm
dgamma
methods("predict")
setwd("C:/Documents and Settings/Borja/Escritorio/Data_products/Assignment")
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(datasets)
# We tweak the "am" field to have nicer factor labels. Since this doesn't
# rely on any user inputs we can do this once at startup and then use the
# value throughout the lifetime of the application
database <- mtcars
database$cyl <- as.factor(database$cyl)
database$vs <- as.factor(database$vs)
database$am <- as.factor(database$am)
database$gear <- as.factor(database$gear)
database$carb <- as.factor(database$carb)
attach(database)
library(datasets)
# We tweak the "am" field to have nicer factor labels. Since this doesn't
# rely on any user inputs we can do this once at startup and then use the
# value throughout the lifetime of the application
database <- mtcars
database$cyl <- as.factor(database$cyl)
database$vs <- as.factor(database$vs)
database$am <- as.factor(database$am)
database$gear <- as.factor(database$gear)
database$carb <- as.factor(database$carb)
attach(database)
lm(mpg cyl,data=database)
lm(mpg~cyl,data=database)
?plot.lm
?plot
shiny::runApp()
shiny::runApp()
